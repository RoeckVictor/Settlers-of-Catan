# Petit Makefile pour g√©rer plus simplement la documentation.

# La documentation est s√©par√©e en deux r√©pertoires :
#	- `client/`, qui prend en compte le code source du jeu c√¥t√© client 
#	  (r√©pertoires correspondants dans `pi/Catan/Assets/Resources/Scripts/`) ;
#	- `server/`, qui prend en compte le code source du jeu c√¥t√© serveur
#	  (r√©pertoires correspondants dans `pi/Server_PI-OS/Server_PI-OS/`).
# Les deux fichiers Doxyfile utilis√©s sont respectivement plac√©s dans 
# les dossiers `client/` et `server/`.
# La liste des commandes est disponible via `make help`.

# NOTE : Il est recommand√© d'utiliser ce Makefile, dans le r√©pertoire 
#		 `doc-code-source/`, pour g√©n√©rer la documentation, puisque les
# 		 Doxyfile utilisent des chemins relatifs (pour g√©rer les INPUT 
# 	     notamment) relativement √† l'emplacement depuis lequel la commande 
#		 `doxygen` est lanc√©e.


CLIENT_REP = client/
SERVER_REP = server/


.PHONY: all

all: doc-all


##### g√©n√©rer la documentation

doc-all: doc-client doc-server

doc-client:
	doxygen $(CLIENT_REP)Doxyfile
	@echo "[1m   ==>  Documentation du code client g√©n√©r√©e dans $(CLIENT_REP)[0m"

doc-server:
	doxygen $(SERVER_REP)Doxyfile
	@echo "[1m   ==>  Documentation du code serveur g√©n√©r√©e dans $(SERVER_REP)[0m"


##### supprimer la documentation

clean-all: clean-client clean-server

clean-client:
	rm -rf $(CLIENT_REP)html $(CLIENT_REP)latex $(CLIENT_REP)xml
	@echo "[1m   ==>  Documentation du code client supprim√©e[0m"

clean-server:
	rm -rf $(SERVER_REP)html $(SERVER_REP)latex $(SERVER_REP)xml
	@echo "[1m   ==>  Documentation du code serveur supprim√©e[0m"



# afficher les cibles possibles

help:
	@echo "--> Commandes du Makefile pour g√©rer la documentation"
	@echo "  * G√©n√©rer la documentation:    make [doc-all|doc-client|doc-server] "
	@echo "  * Supprimer la documentation:  make [clean-all|clean-client|clean-server] "
